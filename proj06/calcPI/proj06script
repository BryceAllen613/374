Script started on 2019-11-04 10:30:21-0500
]0;bda5@maroon33: ~/374/proj06/calcPI[01;32mbda5@maroon33[00m:[01;34m~/374/proj06/calcPI[00m$ cd reduction
]0;bda5@maroon33: ~/374/proj06/calcPI/reduction[01;32mbda5@maroon33[00m:[01;34m~/374/proj06/calcPI/reduction[00m$ ls
[0m[01;32mcalcPI2[0m  calcPI2.c  Makefile  pthreadReduction.h
]0;bda5@maroon33: ~/374/proj06/calcPI/reduction[01;32mbda5@maroon33[00m:[01;34m~/374/proj06/calcPI/reduction[00m$ make
make: 'calcPI2' is up to date.
]0;bda5@maroon33: ~/374/proj06/calcPI/reduction[01;32mbda5@maroon33[00m:[01;34m~/374/proj06/calcPI/reduction[00m$ cat calcPI2.c
/* calcPI2.c calculates PI using POSIX threads.
 * Since PI == 4 * arctan(1), and arctan(x) is the 
 *  integral from 0 to x of (1/(1+x*x),
 *  the for loop below approximates that integration.
 *
 * Joel Adams, Calvin College, Fall 2013.
 * Modified to use reduction pattern in order
 * to achieve speedup (as opposed to mutex) by
 * Bryce Allen, Calvin University, prooject06, 10/31/19
 *
 * Usage: ./calcPI2 [numIntervals] [numThreads]
 */

#include <stdio.h>                 // printf(), fprintf(), etc.
#include <stdlib.h>                // strtoul(), exit(), ...
#include <pthread.h>               // pthreads
#include <mpi.h>                   // MPI_Wtime()
#include "pthreadReduction.h" 

// global variables (shared by all threads 
volatile long double pi = 0.0;       // our approximation of PI 
pthread_mutex_t      piLock;         // how we synchronize writes to 'pi' 
long double          intervals = 0;  // how finely we chop up the integration 
unsigned long        numThreads = 0; // how many threads we use 

long double * globalArray;

/* compute PI using the parallel for loop pattern
 * Parameters: arg, a void* 
 * Preconditions: 
 *   - non-locals intervals and numThreads are defined.
 *   - arg contains the address of our thread's ID.
 * Postcondition: non-local pi contains our approximation of PI.
 */
void * computePI(void * arg)
{
    long double   x,
                  width,
                  localSum = 0;
                  // local sum made for each thread when they call this function
    unsigned long i,
                  threadID = *((unsigned long *)arg);

    width = 1.0 / intervals;

    for(i = threadID ; i < intervals; i += numThreads) {
        x = (i + 0.5) * width;
        localSum += 4.0 / (1.0 + x*x);
    }

    localSum *= width; 

    // pthread_mutex_lock(&piLock);
    // pi += localSum;
    // pthread_mutex_unlock(&piLock); 

    pthreadReductionSum(localSum, &pi, globalArray, 
        (int)numThreads, (int)threadID);

    return NULL;
} 

/* process the command-line arguments
 * Parameters: argc, an int; and argv a char**.
 * Postcondition:
 *  - non-locals intervals and numThreads have been defined.
 *     according to the values the user specified when
 *     calcPI2 was invoked.
 */
void processCommandLine(int argc, char ** argv) {
   if ( argc == 3 ) {
      intervals = strtoul(argv[1], 0, 10); 
      numThreads = strtoul(argv[2], 0, 10); 
   } else if ( argc == 2 ) {
      intervals = strtoul(argv[1], 0, 10);
      numThreads = 1;
   } else if ( argc == 1 ) {
      intervals = 1;
      numThreads = 1;
   } else {
      fprintf(stderr, "\nUsage: calcPI2 [intervals] [numThreads]\n\n");
      exit(1);
   }
   globalArray = (long double *) malloc(numThreads*sizeof(long double));
}
      

int main(int argc, char **argv) {
    pthread_t * threads;            // dynamic array of threads 
    unsigned long  * threadID;      // dynamic array of thread id #s 
    unsigned long i;                // loop control variable 
    double startTime = 0,           // timing variables
           stopTime = 0;

    processCommandLine(argc, argv);

    threads = malloc(numThreads*sizeof(pthread_t));
    threadID = malloc(numThreads*sizeof(unsigned long));
    pthread_mutex_init(&piLock, NULL);

    startTime = MPI_Wtime();

    for (i = 0; i < numThreads; i++) {   // fork threads
        threadID[i] = i;
        pthread_create(&threads[i], NULL, computePI, threadID+i);
    }

    for (i = 0; i < numThreads; i++) {   // join them
        pthread_join(threads[i], NULL);
    }
    stopTime = MPI_Wtime();

    printf("Estimation of pi is %32.30Lf in %lf secs\n", pi, stopTime - startTime);
    printf("(actual pi value is 3.141592653589793238462643383279...)\n");
   
    pthread_mutex_destroy(&piLock);
    return 0;
}

]0;bda5@maroon33: ~/374/proj06/calcPI/reduction[01;32mbda5@maroon33[00m:[01;34m~/374/proj06/calcPI/reduction[00m$ cat pthreadReduction.h
/* pthreadReduction.h is my personal algorithm for 
 * performing reduction on multithreaded programs in hopes
 * of speeding up the traditional mutex algorithm.
 * 
 * Author: Bryce Allen
 * Date: 10/31/2019 
 */


unsigned count = 0;
pthread_cond_t allThreadsPresent = PTHREAD_COND_INITIALIZER;

/* pthreadReductionSum reduces values from multiple threads
 * and sums them into one shared global variable
 * 
 * @param: localVar, the local value from all threads
 * @param: globalVar, the global sum available to all threads
 * @param: reduceArray, the buffer where each thread places localVar
 * @param: numThreads, number of threads being reduced
 * @param: threadID, integer used for indexing reduceArray 
 */
void pthreadReductionSum(long double localVar, 
    long double* globalVar, 
    long double* reduceArray, int numThreads, int threadID)
{
    reduceArray[threadID] = localVar;
    count++;
    if(count == numThreads)
    {
        count = 0;
        //pthread_cond_broadcast( &allThreadsPresent );
        for(int i = 0; i < numThreads; i++)
        {
            *globalVar += reduceArray[i];
        }
    }
}]0;bda5@maroon33: ~/374/proj06/calcPI/reduction[01;32mbda5@maroon33[00m:[01;34m~/374/proj06/calcPI/reduction[00m$ ./calcPI2 1000000000 4
Estimation of pi is 3.141592653589793591745876755184 in 1.458567 secs
(actual pi value is 3.141592653589793238462643383279...)
]0;bda5@maroon33: ~/374/proj06/calcPI/reduction[01;32mbda5@maroon33[00m:[01;34m~/374/proj06/calcPI/reduction[00m$ exit

Script done on 2019-11-04 10:31:56-0500
