Script started on 2019-10-04 12:15:34-0400
]0;bda5@gold29: ~/374/proj03[01;32mbda5@gold29[00m:[01;34m~/374/proj03[00m$ ls
display.c  [0m[01;32mFire[0m           firestarter.o    out.txt     X-graph.h
display.h  [01;34mfirestarter[0m    [01;31mfirestarter.tgz[0m  typescript  X-graph.o
display.o  firestarter.c  Makefile         X-graph.c
]0;bda5@gold29: ~/374/proj03[01;32mbda5@gold29[00m:[01;34m~/374/proj03[00m$ make
make: 'Fire' is up to date.
]0;bda5@gold29: ~/374/proj03[01;32mbda5@gold29[00m:[01;34m~/374/proj03[00m$ cat firestarter.c
/* firestarter.c 
 * David Joiner
 * Usage: Fire [forestSize(20)] [numTrials(5000)] * [numProbabilities(101)] [showGraph(1)]
 * dowloaded and edited to make parallel by Bryce Allen, proj02, cs 374,
 * Calvin University
 */
#include <stdio.h>
#include <stdlib.h>
#include "X-graph.h"
#include <mpi.h>

#define UNBURNT 0
#define SMOLDERING 1
#define BURNING 2
#define BURNT 3

#define true 1
#define false 0

typedef int boolean;

extern void seed_by_time(int);
extern int ** allocate_forest(int);
extern void initialize_forest(int, int **);
extern double get_percent_burned(int, int **);
extern void delete_forest(int, int **);
extern void light_tree(int, int **,int,int);
extern boolean forest_is_burning(int, int **);
extern void forest_burns(int, int **,double);
extern int burn_until_out(int,int **,double,int,int);
extern void print_forest(int, int **);

int main(int argc, char ** argv) {
    // initial conditions and variable definitions
    int forest_size=20;
    double * prob_spread;
    double * probOut;
    double prob_min=0.0;
    double prob_max=1.0;
    double prob_step;
    int **forest;
    double * percent_burned;
    double * iterations;
    int i_prob;
    int n_probs=101; //for each % 0-100
    int i_trial;
    int n_trials=5000; //do 5000 trials

    int do_display=0;
    xgraph thegraph;

    int id, numProcesses = -1;
    double* burnCount;
    double* totalPercent;
    double* totalBurned;
    double startTime = 0.0;
    double endTime = 0.0;

    // check command line arguments

    if (argc > 1) {
        sscanf(argv[1],"%d",&forest_size);
    }
    if (argc > 2) {
        sscanf(argv[2],"%d",&n_trials);
    }
    if (argc > 3) {
        sscanf(argv[3],"%d",&n_probs);
    }
    if (argc > 4) {
        sscanf(argv[4],"%d",&do_display);
    }
    if (do_display!=0) do_display=1; //default (when we simply ./Fire)

    // start mpi
    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &id);
    MPI_Comm_size(MPI_COMM_WORLD, &numProcesses);

    int chunkSize = (n_trials / numProcesses);
    // setup problem
    seed_by_time(0);
    forest=allocate_forest(forest_size);
    prob_spread = (double *) malloc (n_probs*sizeof(double));
    percent_burned = (double *) malloc (n_probs*sizeof(double));
    iterations = (double *) malloc (n_probs*sizeof(double));
    // for a number of probabilities, calculate
    // average burn and output
    prob_step = (prob_max-prob_min)/(double)(n_probs-1);
    
    startTime = MPI_Wtime();
    for (i_prob = 0 ; i_prob < n_probs; i_prob++) {
    //for (i_prob = id*chunkSize ; i_prob < (id+1)*chunkSize; i_prob++) {
        //for a number of trials, calculate average
        //percent burn
        prob_spread[i_prob] = prob_min + (double)i_prob * prob_step;
        percent_burned[i_prob]=0.0;

        double localSum = 0.0;
        double localIterations = 0.0;
        
        for (i_trial=id*chunkSize; i_trial < chunkSize*(id+1); i_trial++) { //chunks
        //for(i_trial = id; i_trial < n_trials; i_trial+=numProcesses){ //slices
            //burn until fire is gone
            
            localIterations += burn_until_out(forest_size,forest,prob_spread[i_prob],
                forest_size/2,forest_size/2);
            
            //percent_burned[i_prob]+=get_percent_burned(forest_size,forest);
            localSum += get_percent_burned(forest_size,forest);
            
        }
        MPI_Reduce(&localSum, &percent_burned[i_prob], 1, MPI_DOUBLE, MPI_SUM, 
            0, MPI_COMM_WORLD);
        MPI_Reduce(&localIterations, &iterations[i_prob], 1, MPI_DOUBLE, MPI_SUM, 
            0, MPI_COMM_WORLD);
        
        
        percent_burned[i_prob] /= n_trials; //average the 5000 results
        iterations[i_prob] /= n_trials;

        // print output not included in time calculation
        if( id == 0 )
        {
            printf("%lf\t%lf\t%lf\n",prob_spread[i_prob],
                percent_burned[i_prob], iterations[i_prob]);
        }
    }
    endTime += (MPI_Wtime() - startTime);
    if( id == 0 ) 
        printf("%f", endTime);

    MPI_Finalize();


    // plot graph
    // if (do_display==1) {
    //     xgraphSetup(&thegraph,300,300);
    //     xgraphDraw(&thegraph,n_probs,0,0,1,1,prob_spread,percent_burned);
    //     pause();
    // }

    // clean up
    delete_forest(forest_size,forest);
    free(prob_spread);
    free(percent_burned);
    return 0;
}
//______________________________________________
#include <time.h>

void seed_by_time(int offset) {
    time_t the_time;
    time(&the_time);
    srand((int)the_time+offset);
}

int burn_until_out(int forest_size,int ** forest, double prob_spread,
    int start_i, int start_j) {
    int count;

    initialize_forest(forest_size,forest);
    light_tree(forest_size,forest,start_i,start_j);

    // burn until fire is gone
    count = 0;
    while(forest_is_burning(forest_size,forest)) {
        forest_burns(forest_size,forest,prob_spread);
        count++;
    }

    return count;
}

double get_percent_burned(int forest_size,int ** forest) {
    int i,j;
    int total = forest_size*forest_size-1;
    int sum=0;

    // calculate pecrent burned
    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                sum++;
            }
        }
    }

    // return percent burned;
    return ((double)(sum-1)/(double)total);
}


int ** allocate_forest(int forest_size) {
    int i;
    int ** forest;

    forest = (int **) malloc (sizeof(int*)*forest_size);
    for (i=0;i<forest_size;i++) {
        forest[i] = (int *) malloc (sizeof(int)*forest_size);
    }

    return forest;
}

void initialize_forest(int forest_size, int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            forest[i][j]=UNBURNT;
        }
    }
}

void delete_forest(int forest_size, int ** forest) {
    int i;

    for (i=0;i<forest_size;i++) {
        free(forest[i]);
    }
    free(forest);
}

void light_tree(int forest_size, int ** forest, int i, int j) {
    forest[i][j]=SMOLDERING;
}

boolean fire_spreads(double prob_spread) {
    if ((double)rand()/(double)RAND_MAX < prob_spread) 
        return true;
    else
        return false;
}

void forest_burns(int forest_size, int **forest,double prob_spread) {
    int i,j;
    extern boolean fire_spreads(double);

    //burning trees burn down, smoldering trees ignite
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) forest[i][j]=BURNT;
            if (forest[i][j]==SMOLDERING) forest[i][j]=BURNING;
        }
    }

    //unburnt trees catch fire
    for (i=0; i<forest_size; i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNING) {
                if (i!=0) { // North
                    if (fire_spreads(prob_spread)&&forest[i-1][j]==UNBURNT) {
                        forest[i-1][j]=SMOLDERING;
                    }
                }
                if (i!=forest_size-1) { //South
                    if (fire_spreads(prob_spread)&&forest[i+1][j]==UNBURNT) {
                        forest[i+1][j]=SMOLDERING;
                    }
                }
                if (j!=0) { // West
                    if (fire_spreads(prob_spread)&&forest[i][j-1]==UNBURNT) {
                        forest[i][j-1]=SMOLDERING;
                    }
                }
                if (j!=forest_size-1) { // East
                    if (fire_spreads(prob_spread)&&forest[i][j+1]==UNBURNT) {
                        forest[i][j+1]=SMOLDERING;
                    }
                }
            }
        }
    }
}

boolean forest_is_burning(int forest_size, int ** forest) {
    int i,j;

    for (i=0; i<forest_size; i++) {
        for (j=0; j<forest_size; j++) {
            if (forest[i][j]==SMOLDERING||forest[i][j]==BURNING) {
                return true;
            }
        }
    }
    return false;
}

void print_forest(int forest_size,int ** forest) {
    int i,j;

    for (i=0;i<forest_size;i++) {
        for (j=0;j<forest_size;j++) {
            if (forest[i][j]==BURNT) {
                printf(".");
            } else {
                printf("X");
            }
        }
        printf("\n");
    }
}
]0;bda5@gold29: ~/374/proj03[01;32mbda5@gold29[00m:[01;34m~/374/proj03[00m$ mpirun -np          ssh bda5@borg
bda5@borg's password: 
Last login: Mon Sep 30 20:02:46 2019 from borg-fw1-int.calvin.edu
]0;bda5@borg-head1:~[?1034h[bda5@borg-head1 ~]$ cd 374/proj03/
]0;bda5@borg-head1:~/374/proj03[bda5@borg-head1 proj03]$ ls
display.c  [0m[38;5;34mFire[0m           firestarter.o    out.txt            X-graph.h
display.h  [38;5;27mfirestarter[0m    [38;5;9mfirestarter.tgz[0m  [38;5;27mslurm_submissions[0m  X-graph.o
display.o  firestarter.c  Makefile         X-graph.c
]0;bda5@borg-head1:~/374/proj03[bda5@borg-head1 proj03]$ cd slurm_submissions
]0;bda5@borg-head1:~/374/proj03/slurm_submissions[bda5@borg-head1 slurm_submissions]$ cd  ls
[0m[38;5;27m20out[0m                borgScript16-16.slurm  borgScript4-16.slurm
[38;5;27m40out[0m                borgScript16-8.slurm   borgScript4-8.slurm
[38;5;27m80out[0m                borgScript1-8.slurm    borgScript8-16.slurm
borgScript1-1.slurm  borgScript2-16.slurm   borgScript8-8.slurm
borgScript1-2.slurm  borgScript2-8.slurm    readme.txt
borgScript1-4.slurm  borgScript3-16.slurm
]0;bda5@borg-head1:~/374/proj03/slurm_submissions[bda5@borg-head1 slurm_submissions]$ cd 20out
]0;bda5@borg-head1:~/374/proj03/slurm_submissions/20out[bda5@borg-head1 20out]$ ls
slurm-101632.out  slurm-101635.out  slurm-101638.out  slurm-101641.out
slurm-101633.out  slurm-101636.out  slurm-101639.out
slurm-101634.out  slurm-101637.out  slurm-101640.out
]0;bda5@borg-head1:~/374/proj03/slurm_submissions/20out[bda5@borg-head1 20out]$ cat slurm-101641.out
0.000000	0.000000	1.945600
0.010000	0.000128	1.996800
0.020000	0.000000	1.945600
0.030000	0.000257	2.048000
0.040000	0.000513	2.150400
0.050000	0.000385	2.099200
0.060000	0.001412	2.406400
0.070000	0.001155	2.406400
0.080000	0.000898	2.252800
0.090000	0.001155	2.355200
0.100000	0.000898	2.304000
0.110000	0.001027	2.304000
0.120000	0.001540	2.457600
0.130000	0.003465	3.123200
0.140000	0.001925	2.508800
0.150000	0.003080	2.918400
0.160000	0.001925	2.611200
0.170000	0.003978	3.174400
0.180000	0.003593	2.969600
0.190000	0.004876	3.276800
0.200000	0.005261	3.584000
0.210000	0.003978	3.328000
0.220000	0.004363	3.072000
0.230000	0.004491	3.123200
0.240000	0.008597	4.044800
0.250000	0.012190	4.915200
0.260000	0.005518	3.635200
0.270000	0.008982	4.044800
0.280000	0.011036	4.198400
0.290000	0.013474	5.017600
0.300000	0.011549	5.068800
0.310000	0.015655	4.864000
0.320000	0.020531	6.246400
0.330000	0.023483	6.400000
0.340000	0.032209	7.628800
0.350000	0.016168	5.222400
0.360000	0.027846	7.526400
0.370000	0.045939	9.779200
0.380000	0.040934	8.243200
0.390000	0.028487	6.912000
0.400000	0.047864	8.396800
0.410000	0.096241	14.694400
0.420000	0.130117	18.329600
0.430000	0.111382	13.465600
0.440000	0.112409	15.513600
0.450000	0.145901	16.281600
0.460000	0.175158	20.275200
0.470000	0.194278	15.923200
0.480000	0.278328	21.043200
0.490000	0.328373	22.732800
0.500000	0.285001	22.425600
0.510000	0.388299	26.624000
0.520000	0.504557	32.563200
0.530000	0.418069	26.112000
0.540000	0.563328	28.313600
0.550000	0.717698	34.457600
0.560000	0.679844	31.948800
0.570000	0.746699	32.000000
0.580000	0.750163	31.488000
0.590000	0.765819	27.392000
0.600000	0.800593	29.542400
0.610000	0.827926	25.856000
0.620000	0.892728	27.750400
0.630000	0.854103	26.265600
0.640000	0.851537	25.497600
0.650000	0.929684	26.880000
0.660000	0.776726	21.657600
0.670000	0.883745	25.190400
0.680000	0.943799	24.985600
0.690000	0.944698	23.603200
0.700000	0.949702	24.627200
0.710000	0.949189	24.268800
0.720000	0.953167	22.886400
0.730000	0.906073	21.504000
0.740000	0.962021	23.398400
0.750000	0.960096	22.630400
0.760000	0.961893	22.476800
0.770000	0.962919	22.016000
0.780000	0.966512	21.964800
0.790000	0.967026	22.016000
0.800000	0.968180	21.964800
0.810000	0.967539	21.350400
0.820000	0.968694	21.708800
0.830000	0.970747	21.452800
0.840000	0.971260	21.657600
0.850000	0.971004	21.760000
0.860000	0.971645	21.606400
0.870000	0.920702	20.582400
0.880000	0.972543	21.555200
0.890000	0.971773	21.401600
0.900000	0.972415	21.452800
0.910000	0.972030	21.555200
0.920000	0.972800	21.401600
0.930000	0.972800	21.401600
0.940000	0.972672	21.401600
0.950000	0.972672	21.401600
0.960000	0.972800	21.452800
0.970000	0.972800	21.401600
0.980000	0.972800	21.401600
0.990000	0.972800	21.401600
1.000000	0.972800	21.401600
0.184705]0;bda5@borg-head1:~/374/proj03/slurm_submissions/20out[bda5@borg-head1 20out]$ exit
logout
Connection to borg closed.
]0;bda5@gold29: ~/374/proj03[01;32mbda5@gold29[00m:[01;34m~/374/proj03[00m$ exit

Script done on 2019-10-04 12:20:36-0400
